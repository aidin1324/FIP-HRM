from sqlalchemy.ext.asyncio import AsyncSession

from repository.emps.feedbacks import FeedbackRepository
from repository.emps.feedback_type import FeedbackTypeRepository

import httpx
from config import telegram_token
from model import Feedback

from schema.emps.feedbacks import FeedbackUpdate


class TelegramBotService:
    def __init__(
        self,
        session: AsyncSession,
        feedback_repo: FeedbackRepository,
        feedback_type_repo: FeedbackTypeRepository    
    ):
        self.session = session
        self.feedback_repo = feedback_repo
        self.feedback_type_repo = feedback_type_repo
        
    async def format_feedback(
        self, 
        feedback
    ):
        ratings = []
 
        for rating in feedback.ratings:
            feedback_type = await self.feedback_type_repo.get_feedback_type_by_id(rating.feedback_type_id)
            ratings.append(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è: {feedback_type.feedback_type},\n–û—Ü–µ–Ω–∫–∞: {rating.rating}")
            
        return (
            f"üìù –û—Ç–∑—ã–≤ ‚Ññ{feedback.id}\n"
            f"üìÖ –í—Ä–µ–º—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–∑—ã–≤–∞: {feedback.created_at.strftime('%Y-%m-%d %H:%M')}\n\n"
            f"ü§µ –û–±—Å–ª—É–∂–∏–≤–∞–ª: {feedback.waiter.waiter_name if feedback.waiter else "–ù–µ —É–∫–∞–∑–∞–Ω"}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ\n"
            f"–¢–µ–ª–µ—Ñ–æ–Ω: {feedback.contact.phone if feedback.contact else "–ù–µ —É–∫–∞–∑–∞–Ω"}\n\n"
            f"‚≠ê –û—Ü–µ–Ω–∫–∏\n"
            + "\n".join(ratings) + "\n\n"
            f"üí¨ –ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π\n"
            f"{feedback.comment.comment if feedback.comment else "–ù–µ –æ—Å—Ç–∞–≤–ª–µ–Ω"}\n\n"
        )

    async def send_feedback_message(
        self,
        chat_id: int,
        feedback: Feedback 
    ):
        url = f"https://api.telegram.org/bot{telegram_token}/sendMessage"
        
        async with httpx.AsyncClient() as client:
            text = await self.format_feedback(feedback)
            payload = {
                "chat_id": chat_id,
                "text": text
            }
            try:
                response = await client.post(url, json=payload)
                response.raise_for_status() 
                
                 
                result = await self.feedback_repo.update_feedback(
                    feedback=feedback,
                    feedback_update=FeedbackUpdate(
                        is_notified=True
                    )
                )
                await self.session.commit()
                await self.session.close()
                return result
            
            except httpx.HTTPStatusError as e:
                print(f"–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}: {e}")

        