"""initial db

Revision ID: bb94a43f88c7
Revises: 
Create Date: 2025-01-07 19:10:59.966725

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision: str = 'bb94a43f88c7'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('categories',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('category', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('feedback_types',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('feedback_type', sa.String(length=255), nullable=False),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('feedbacks',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=True),
    sa.Column('is_notified', sa.Boolean(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('roles',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('role', sa.String(length=20), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('role')
    )
    op.create_table('contacts',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('phone', sa.String(length=100), nullable=False),
    sa.Column('feedback_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['feedback_id'], ['feedbacks.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('rating',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('rating', sa.Integer(), nullable=False),
    sa.Column('feedback_id', sa.Integer(), nullable=False),
    sa.Column('feedback_type_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['feedback_id'], ['feedbacks.id'], ),
    sa.ForeignKeyConstraint(['feedback_type_id'], ['feedback_types.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('tags',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('tag', sa.String(length=50), nullable=False),
    sa.Column('category_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['category_id'], ['categories.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('users',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('second_name', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('role_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('registration_requests',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('first_name', sa.String(length=50), nullable=False),
    sa.Column('second_name', sa.String(length=50), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('hashed_password', sa.String(length=255), nullable=False),
    sa.Column('status', sa.Enum('pending', 'approved', 'rejected', name='statusenum'), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('admin_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['admin_id'], ['users.id'], ),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('email')
    )
    op.create_table('waiter_scores',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('score', sa.Integer(), nullable=False),
    sa.Column('comment', sa.String(length=200), nullable=True),
    sa.Column('feedback_id', sa.Integer(), nullable=False),
    sa.Column('waiter_id', sa.Integer(), nullable=False),
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['feedback_id'], ['feedbacks.id'], ),
    sa.ForeignKeyConstraint(['tag_id'], ['tags.id'], ),
    sa.ForeignKeyConstraint(['waiter_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    
    op.execute("INSERT INTO roles (role) VALUES ('админ'), ('менеджер'), ('официант')")
    op.execute("INSERT INTO feedback_types (feedback_type) VALUES ('Скорость Обслуживание'), ('Атмосфера')")
    op.execute("INSERT INTO categories (category) VALUES ('позитивный'), ('негативный'), ('нейтральный')")
    op.execute(
        """
            INSERT INTO tags (tag, category_id) VALUES
            ('Вежливость', 1),
            ('Быстрота', 1),
            ('Внимательность', 1),
            ('Знание меню', 1),
            ('Чистота', 1),
            ('Атмосфера общения', 1),
            ('Грубость', 2),
            ('Медлительность', 2),
            ('Игнорирование', 2),
            ('Ошибки в заказе', 2),
            ('Неряшливость', 2),
            ('Отказ в помощи', 2),
            ('Оперативность', 3),
            ('Уважение', 3),
            ('Информативность', 3),
            ('Качаство подачи', 3),
            ('Вовлеченность', 3),
            ('Реакции на запросы', 3);
        """
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('waiter_scores')
    op.drop_table('registration_requests')
    op.drop_table('users')
    op.drop_table('tags')
    op.drop_table('rating')
    op.drop_table('contacts')
    op.drop_table('roles')
    op.drop_table('feedbacks')
    op.drop_table('feedback_types')
    op.drop_table('categories')
    
    op.execute("DROP TYPE IF EXISTS statusenum")
    # ### end Alembic commands ###
